{"version":3,"sources":["components/Header.jsx","components/About.jsx","components/Place.jsx","components/Search.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","Navbar","className","Brand","href","React","Component","About","Jumbotron","Place","Card","Body","Title","this","props","info","name","address","tel","location","latitude","longitude","lat","lng","variant","Search","state","places","distance","checkDistance","bind","handleClick","handleChange","data","isPointWithinRadius","window","navigator","geolocation","getCurrentPosition","success","setState","coords","locationable","error","alert","getCurrentLocation","console","log","event","target","value","placeData","Container","Form","Group","Control","as","onChange","Button","onClick","Row","map","i","Col","sm","md","lg","key","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.cd522f62.chunk.js","sourcesContent":["import React from 'react';\nimport { Navbar } from 'react-bootstrap';\n\nclass Header extends React.Component {\n    render() {\n        return (\n            <Navbar className=\"bg-primary\">\n                <Navbar.Brand href=\"\" className=\"text-white\">浜田市避難所アプリ</Navbar.Brand>\n            </Navbar>\n        );\n    }\n}\n\nexport default Header;\n","import React from 'react';\nimport { Jumbotron } from 'react-bootstrap';\n\nclass About extends React.Component {\n    render() {\n        return (\n            <Jumbotron>\n                <h1>浜田市避難所アプリへようこそ</h1>\n                <p>\n                    あなたの現在位置を使い、周辺の避難所を一覧で表示してくれるアプリです。\n                </p>\n                <p>\n                    また位置情報が有効になっていない場合は避難所を表示できません。その場合は位置情報を許可してから再度「避難所を探す」ボタンをクリックしてください。\n                </p>\n                <p className=\"text-danger\">※実際の避難所の開設状況については、浜田市防災行政無線、浜田市防災防犯メール、テレビのデータ放送など、浜田市が発信する情報により確認してください</p>\n                <p className=\"text-danger\">※アプリで表示される道順は、浸水・倒木など周囲の被災状況により、使用できない可能性があります。周囲をよく確認し、行動してください</p>\n                <p className=\"text-danger\">※避難所に行くことだけが避難ではありません。親戚・知人宅、ホテル等への宿泊も含め、災害の状況に応じた最も安全な場所を、日ごろから検討してください</p>\n            </Jumbotron>\n        );\n    }\n}\n\nexport default About;\n","import React from 'react';\nimport { Card } from 'react-bootstrap';\n\nclass Place extends React.Component {\n\n    render() {\n        return (\n            <Card>\n                <Card.Body>\n                    <Card.Title>{this.props.info.name}</Card.Title>\n                    <div className=\"card-body\">\n                        <div>\n                            {this.props.info.address}\n                        </div>\n                        <div>\n                            TEL:{this.props.info.tel}\n                        </div>\n                        <div>\n                            備考:{this.props.info.info}\n                        </div>\n                    </div>\n                    <a href={`https://www.google.com/maps/dir/?api=1&origin=${this.props.info.location.latitude},${this.props.info.location.longitude}&destination=${this.props.lat},${this.props.lng}`} className=\"btn btn-outline-success\" variant=\"primary\" >避難所までの道順を見る</a>\n                </Card.Body>\n            </Card>\n        );\n    }\n}\n\nexport default Place;\n","import React from 'react';\nimport { isPointWithinRadius } from 'geolib';\nimport { Row, Col, Container, Button, Form } from 'react-bootstrap';\n\n// import Place component\nimport Place from './Place.jsx';\n\n// import Place data\nimport places from '../data/places.json';\n\nclass Search extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            latitude: 0,\n            longitude: 0,\n            places: places,\n            distance: 1\n        }\n        this.checkDistance = this.checkDistance.bind(this);\n        this.handleClick = this.handleClick.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    checkDistance(location, data) {\n        let result = isPointWithinRadius(location, data, this.state.distance * 1000);\n        return result;\n    }\n\n    getCurrentLocation() {\n        window.navigator.geolocation.getCurrentPosition(\n            success => this.setState({ latitude: success.coords.latitude, longitude: success.coords.longitude, locationable: true }),\n            error => alert(\"位置情報が許可されていません!\\n位置情報を許可してから「避難所を探す」をクリックしてください!\")\n        );\n    }\n\n    componentDidMount() {\n        this.getCurrentLocation()\n    }\n\n    handleClick() {\n        this.getCurrentLocation()\n        this.checkDistance.bind(this)\n        console.log(this.state)\n    }\n\n    handleChange(event) {\n        this.setState({ distance: event.target.value });\n    }\n\n    render() {\n        let placeData = this.state.places;\n        let result = false;\n\n        return (\n            <Container>\n                <div className=\"d-flex justify-content-center\">\n                    <Form.Group>\n                        <Form.Control as=\"select\" value={this.state.distance} onChange={this.handleChange} >\n                            <option value='1'>周辺半径1km</option>\n                            <option value='2'>周辺半径2km</option>\n                            <option value='3'>周辺半径3km</option>\n                            <option value='4'>周辺半径4km</option>\n                            <option value='5'>周辺半径5km</option>\n                            <option value='6'>周辺半径6km</option>\n                            <option value='7'>周辺半径7km</option>\n                            <option value='8'>周辺半径8km</option>\n                            <option value='9'>周辺半径9km</option>\n                            <option value='10'>周辺半径10km</option>\n                        </Form.Control>\n                    </Form.Group>\n                </div>\n                <div className=\"d-flex justify-content-center\">\n                    <Button variant=\"success\" onClick={this.handleClick}>避難所を探す</Button>\n                </div>\n                <div className=\"d-flex justify-content-center mt-5\">\n                    <Button variant=\"primary\">最寄りの避難所一覧</Button>\n                </div>\n                <Row className=\"mt-5\">\n                    {placeData.map((data, i) => {\n                        result = this.checkDistance(this.state, { latitude: data.location.latitude, longitude: data.location.longitude });\n                        if (result) {\n                            return (\n                                <Col sm={12} md={4} lg={4} className=\"mt-2\" key={i}>\n                                    <Place info={data} lat={this.state.latitude} lng={this.state.longitude} />\n                                </Col>\n                            );\n                        } else {\n                            return null;\n                        }\n                    })}\n                </Row>\n            </Container>\n        );\n    }\n}\n\nexport default Search;\n","import React from 'react';\nimport './App.css';\n\n// import Bootstrap CSS\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n// import component's\nimport Header from './components/Header';\nimport About from './components/About';\nimport Search from './components/Search';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"app\">\n        <Header />\n        <About />\n        <Search />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}